generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider = "prisma-kysely"
  output   = ".././src/lib/models"
  fileName = "types.ts"
}

model User {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  icon      String
  scores    Score[]
  chips     Chip[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  rooms     RoomUser[]
}

model Score {
  id        String   @id @default(uuid()) @db.Uuid
  input     Int
  score     Int
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String   @db.Uuid
}

model Chip {
  id        String   @id @default(uuid()) @db.Uuid
  input     Int
  chip      Int
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String   @db.Uuid
}

model RoomUser {
  users     User     @relation(fields: [userId], references: [id])
  rooms     Room     @relation(fields: [roomId], references: [id])
  userId    String   @db.Uuid
  roomId    String   @db.Uuid
  order     Int
  createdAt DateTime @default(now())

  @@id([userId, roomId])
  @@unique([userId, roomId])
}

model Room {
  id           String     @id @default(uuid()) @db.Uuid
  name         String
  initialPoint Int
  returnPoint  Int
  bonusPoint   String
  scoreRate    Int
  chipRate     Int
  gameAmount   Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  users        RoomUser[]
  scores       Score[]
  chips        Chip[]
}
